// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Customer {
  id                 String       @id @default(auto()) @map("_id") @db.ObjectId
  customerType       CustomerType
  firstName          String
  lastName           String
  phone              String       @unique
  gender             Gender       @default(MALE)
  country            String
  location           String
  maxCreditLimit     Float?
  maxCreditDays      Int?
  unpaidCreditAmount Float        @default(0.0)
  taxPin             String?
  dob                DateTime?
  email              String?      @unique
  NIC                String?      @unique
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  Sale               Sale[]
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  username  String    @unique
  firstname String
  lastname  String
  password  String
  phone     String
  dob       DateTime?
  gender    Gender
  image     String?
  role      Role      @default(ATTENDANT)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  shops     Shop[] // relationship with shop
}

model Shop {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  slug         String   @unique
  location     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  admin        User?    @relation(fields: [adminId], references: [id])
  adminId      String?  @db.ObjectId
  attendantIds String[] @db.ObjectId
  sales        Sale[]
}

model Supplier {
  id                 String       @id @default(auto()) @map("_id") @db.ObjectId
  supplierType       SupplierType
  name               String
  contactPerson      String
  phone              String       @unique
  email              String?      @unique
  location           String
  country            String
  website            String?
  taxPin             String?
  registrationNumber String?      @unique
  bankAccountNumber  String?
  bankName           String?
  paymentTerms       String?
  rating             Float?
  notes              String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  Product            Product[]
}

enum SupplierType {
  MANUFACTURER
  DISTRIBUTOR
  WHOLESALER
  RETAILER
  OTHER
}

enum CustomerType {
  RETAIL
  WHOLESALE
  DISTRIBUTOR
  OTHER
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  ATTENDANT
  ADMIN
}

model Product {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  alertQty    Int?
  stockQty    Int
  buyingPrice Float
  sku         String     @unique
  productCode String     @unique
  slug        String     @unique
  supplierId  String     @db.ObjectId
  unitId      String     @db.ObjectId
  brandId     String     @db.ObjectId
  categoryId  String     @db.ObjectId
  SaleItem    SaleItem[]
  unit        Unit       @relation(fields: [unitId], references: [id])
  brand       Brand      @relation(fields: [brandId], references: [id])
  category    Category   @relation(fields: [categoryId], references: [id])
  supplier    Supplier   @relation(fields: [supplierId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Brand {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Unit {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  abbreviation String
  slug         String    @unique
  products     Product[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model SaleItem {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  saleId      String @db.ObjectId
  productId   String @db.ObjectId
  qty         Int
  salePrice   Float
  productName String
  // customerName  String
  // customerEmail String?
  //Todo: think about customerId, name and email
  // Note: Consider adding profits and buying price

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relation Ships
  product   Product  @relation(fields: [productId], references: [id])
  sale      Sale     @relation(fields: [saleId], references: [id])
}

model Sale {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  customerId         String        @db.ObjectId
  customerName       String?
  customerEmail      String?
  saleNumber         Int           @unique
  saleType           SaleType
  saleAmount         Int
  paidAmount         Int
  balanceAmount      Int          @default(0)
  paymentStatus      PaymentStatus @default(PAID)
  paymentMethod      PaymentMethod @default(CASH)
  transactionCode    String?
  transactionAccount Accounts?

  saleItems SaleItem[]
  customer  Customer   @relation(fields: [customerId], references: [id])
  Shop      Shop?      @relation(fields: [shopId], references: [id])
  shopId    String    @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PaymentStatus {
  PAID
  CREDIT
}

enum Accounts {
  ALHABIB
  MEEZAN
  EASYPAISA
  JAZZCASH
  RASST
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CHEQUE
}

enum SaleType {
  RETAIL
  SERVICE
  PROJECT
}
